{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/serials-table.service.ts","webpack:///src/app/shared/serials-table/serials-table.component.ts","webpack:///src/app/shared/serials-table/serials-table.component.html","webpack:///src/app/shared/serials.datasourse.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","SerialsTableService","http","filters","pageNumber","pageSize","get","pipe","data","nameSearch","filter","seria","name","trim","toLowerCase","search","genre","genres","join","year","premiere","sort","reverse","initialPos","slice","length","providedIn","SerialsTableComponent","_serialTableService","displayedColumns","result","dataSource","loadSerials","input","nativeElement","value","paginator","pageIndex","subscribe","event","direction","onChangeGenre","onChangePremYear","sortData","SerialsDataSource","serialsSubject","getSerials","next","getAmountSerials","amount","maxLength","collectionViewer","asObservable","complete","SharedModule","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<div class=\"container\">\n  <app-serials-table></app-serials-table>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ISerials } from './serials.model';\nimport { ISerialsFilters } from './serialsFilters.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SerialsTableService {\n\n  constructor(private http: HttpClient) { }\n\n  public getSerials(filters: ISerialsFilters, pageNumber: number, pageSize: number): Observable<ISerials[]> {\n    return this.http.get<ISerials[]>('assets/data/serials.json').pipe(\n      map((data) => {\n        if (filters.nameSearch) {\n          data = data.filter((seria) => seria.name.trim().toLowerCase().search(filters.nameSearch.toLowerCase()) >= 0);\n       }\n        if (filters.genre) {\n        data = data.filter((seria) => seria.genres.join().toLowerCase().search(filters.genre.toLowerCase()) >= 0);\n       }\n        if (filters.year) {\n        data = data.filter((seria) => seria.premiere.search(filters.year) >= 0);\n       }\n\n        if (filters.sort === 'desc') {\n        data = data.reverse();\n        }\n\n        const initialPos = pageNumber * pageSize;\n        data = data.slice(initialPos, initialPos + pageSize);\n        return data;\n      })\n    );\n  }\n\n  public getAmountSerials(filters: ISerialsFilters): Observable<number> {\n    return this.http.get<ISerials[]>('assets/data/serials.json').pipe(\n      map((data) => {\n        if (filters.nameSearch) {\n          data = data.filter((seria) => seria.name.trim().toLowerCase().search(filters.nameSearch.toLowerCase()) >= 0);\n       }\n        if (filters.genre) {\n        data = data.filter((seria) => seria.genres.join().toLowerCase().search(filters.genre.toLowerCase()) >= 0);\n       }\n        if (filters.year) {\n        data = data.filter((seria) => seria.premiere.search(filters.year) >= 0);\n       }\n        return data.length;\n      })\n    );\n  }\n}\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatSelectChange } from '@angular/material/select';\nimport { Sort } from '@angular/material/sort';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';\nimport { SerialsTableService } from '../serials-table.service';\nimport { SerialsDataSource } from '../serials.datasourse';\nimport { ISerialsFilters } from '../serialsFilters.model';\n\n@Component({\n  selector: 'app-serials-table',\n  templateUrl: './serials-table.component.html',\n  styleUrls: ['./serials-table.component.scss']\n})\nexport class SerialsTableComponent implements OnInit, AfterViewInit {\n\n  public displayedColumns: string[] = ['name', 'season', 'network', 'premiere'];\n  public dataSource: SerialsDataSource;\n\n  @ViewChild(MatPaginator, { static: true }) public paginator: MatPaginator;\n  @ViewChild('input', { static: true }) public input: ElementRef;\n  private filters: ISerialsFilters;\n\n  constructor(private _serialTableService: SerialsTableService) {\n    this.filters = {} as ISerialsFilters;\n    this.filters.nameSearch = '';\n    this.filters.genre = '';\n    this.filters.year = '';\n    this.filters.sort = '';\n   }\n  public getColor(genre: string): string {\n    let result = 'dark-item';\n    switch (genre) {\n      case 'drama':\n        result = 'light-purple-item';\n        break;\n      case 'crime':\n        result = 'purple-item';\n        break;\n        case 'tragedy':\n        result = 'red-item';\n        break;\n        case 'dark comedy':\n        result = 'light-dark-item';\n        break;\n      }\n    return result;\n  }\n\n  public ngOnInit() {\n    this.dataSource = new SerialsDataSource(this._serialTableService);\n    this.dataSource.loadSerials(this.filters);\n  }\n\n  public ngAfterViewInit() {\n    fromEvent(this.input.nativeElement, 'keyup')\n            .pipe(\n                debounceTime(150),\n                distinctUntilChanged(),\n                tap(() => {\n                  this.filters.nameSearch = this.input.nativeElement.value;\n                  if (this.paginator) {\n                   this.paginator.pageIndex = 0;\n                  }\n\n                  this.dataSource.loadSerials(this.filters);\n                })\n            )\n            .subscribe();\n  }\n\n  public onChangePage(event: PageEvent) {\n    this.dataSource.loadSerials(this.filters, event.pageIndex, event.pageSize);\n  }\n  public onChangeGenre(event: MatSelectChange) {\n    this.filters.genre = event.value;\n    this.dataSource.loadSerials( this.filters);\n  }\n  public  onChangePremYear(event: MatSelectChange) {\n    this.filters.year = event.value;\n    this.dataSource.loadSerials( this.filters);\n  }\n  public sortData(event: Sort) {\n    this.filters.sort = event.direction;\n    this.dataSource.loadSerials( this.filters);\n  }\n}\n","<div class=\"filters\">\n  <mat-form-field>\n    <mat-label>Name</mat-label>\n    <input matInput #input placeholder=\"Поиск\">\n    <mat-icon matSuffix\n                  class=\"insurance--gray\"\n                  *ngIf=\"true\">search</mat-icon>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Genre</mat-label>\n    <mat-select (selectionChange)=\"onChangeGenre($event)\">\n      <mat-option value=\"\">None</mat-option>\n      <mat-option value=\"horror\">Horror</mat-option>\n      <mat-option value=\"drama\">Drama</mat-option>\n      <mat-option value=\"crime\">Crime</mat-option>\n      <mat-option value=\"tragedy\">Tragedy</mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Premiere Year</mat-label>\n    <mat-select (selectionChange)=\"onChangePremYear($event)\">\n      <mat-option value=\"\">None</mat-option>\n      <mat-option value=\"2020\">2020</mat-option>\n      <mat-option value=\"2019\">2019</mat-option>\n      <mat-option value=\"2018\">2018</mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n\n<table mat-table\n       [dataSource]=\"dataSource\"\n       matSort\n       (matSortChange)=\"sortData($event)\"\n       class=\"mat-elevation-z8\">\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n    <td mat-cell *matCellDef=\"let element\">\n      {{element.name}}\n      <div class=\"genre\">\n        <div *ngFor=\"let genre of element.genres\" [ngClass]=\"getColor(genre)\">{{genre}}</div>\n      </div>\n    </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"season\">\n    <th mat-header-cell *matHeaderCellDef> Season </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.season}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"network\">\n    <th mat-header-cell *matHeaderCellDef> Network </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.network}} </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"premiere\">\n    <th mat-header-cell *matHeaderCellDef> Premiere </th>\n    <td mat-cell *matCellDef=\"let element\"> {{element.premiere}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr> -->\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n\n<div *ngIf=\"dataSource.maxLength\">\n  <mat-paginator class=\"paginator\"\n               [length]=\"dataSource.maxLength\"\n               [pageSize]=\"5\"\n               [pageSizeOptions]=\"[5, 10, 15]\"\n               (page)=\"onChangePage($event)\"></mat-paginator>\n\n</div>\n","import { CollectionViewer } from '@angular/cdk/collections';\r\nimport { DataSource } from '@angular/cdk/table';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { SerialsTableService } from './serials-table.service';\r\nimport { ISerials } from './serials.model';\r\nimport { ISerialsFilters } from './serialsFilters.model';\r\n\r\nexport class SerialsDataSource implements DataSource<ISerials> {\r\n    public maxLength: number;\r\n\r\n    private serialsSubject = new BehaviorSubject<ISerials[]>([]);\r\n\r\n    constructor(private _serialTableService: SerialsTableService) {\r\n    }\r\n\r\n    public loadSerials(filters: ISerialsFilters, pageIndex: number = 0, pageSize: number = 5) {\r\n        this._serialTableService.getSerials(filters, pageIndex, pageSize)\r\n        .subscribe((data) => this.serialsSubject.next(data));\r\n\r\n        this._serialTableService.getAmountSerials(filters).subscribe((amount) => this.maxLength = amount);\r\n    }\r\n\r\n    public connect(collectionViewer: CollectionViewer): Observable<ISerials[]> {\r\n        return this.serialsSubject.asObservable();\r\n    }\r\n\r\n    public disconnect(collectionViewer: CollectionViewer): void {\r\n        this.serialsSubject.complete();\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SerialsTableComponent } from './serials-table/serials-table.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MatSortModule } from '@angular/material/sort';\n\n@NgModule({\n  declarations: [\n    SerialsTableComponent,\n    ],\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule\n  ],\n  exports: [\n    SerialsTableComponent,\n    ]\n})\nexport class SharedModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}